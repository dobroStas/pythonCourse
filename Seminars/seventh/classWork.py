# Задача №47. Решение в группах
# У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине
# программы используется множество раз и вы не хотите ничего сломать):
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transformation = lambda x : x 
# print(values)

# transormed_values = list(map(lambda x : x, values))
# # transormed_values = list(map(transformation, values))
# print(transormed_values)

# Единственный способ вашего взаимодействия с этим кодом - посредством задания
# функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать
# список значений, а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился
# копией values.
# Пример ввода и вывода данных представлены на следующем
# слайде



# Задача №47. Решение в группах
# Ввод:
# values = [1, 23, 42, 'asdfg']
# print(values)
# transformed_values = list(map(transformation, values))
# print(transformed_values)
# if values == transformed_values:
#  print('ok')
# else:
#  print('fail')
# Вывод:
# ok







# # =============================================================================






# Задача №49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна
# Пример ввода и вывода данных представлены на
# следующем слайде



# Задача №49. Решение в группах
# Ввод:
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
elips = list(filter(lambda x : x[0] != x[1], orbits))
res = list(map(lambda x : x[0] * x[1], elips))
i = res.index(max(res))
print(orbits[i])

# =================

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
def elem (orbits) :
    orb = list(filter(lambda x : x[0] != x[1], orbits))
    s_elem = max(orb, key= lambda x : x[0] * x[1])
    print(orb)
    return (s_elem)
print(elem(orbits))

# ================
# Вывод:
# 2.5 10



# # ================================================================================



# Задача №51. Решение в группах
# Напишите функцию same_by(characteristic, objects), которая
# проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов
# отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его
# характеристику.
# Ввод: Вывод:

def same_by(function, objects) :
    for item in objects :
        if not function(item) :
            return False
    return True

values = [0, 2, 10, 6]
if same_by(lambda x: x % 2 == 0, values):
    print('same')   
else:   
    print('differen')


